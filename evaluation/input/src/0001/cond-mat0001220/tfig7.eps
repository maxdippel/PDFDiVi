%!PS-Adobe-3.0 EPSF-3.0
%%Title: (fig7.pdf)
%%Version: 1 2
%%Creator: (\376\377)
%%CreationDate: (D:19991117123956)
%%For: (\376\377)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%BoundingBox: 72 205 499 709
%%Pages: 0
%%DocumentProcessColors: Black
%%DocumentNeededResources:
%%+ font: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments

0 0 moveto
595 0 lineto
595 842 lineto
0 842 lineto
closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: l2check
%%Copyright: Copyright 1993 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: Your printer driver needs to be configured) dup show
72 580 moveto (for printing to a PostScript Language Level 1 printer.) dup show
exch = =
/Helvetica-Bold findfont 16 scalefont setfont
72 520 moveto (Windows and Unix) show
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (Select \252Language Level 1\272 in the PostScript options section) show
72 480 moveto (of the Acrobat print dialog.) show
/Helvetica-Bold findfont 16 scalefont setfont
72 440 moveto (Macintosh) show
/Times-Roman findfont 16 scalefont setfont
72 420 moveto (In the Chooser, select your printer driver.) show
72 400 moveto (Then select your printer and click the Setup button.) show
72 380 moveto (Follow any on-screen dialogs that may appear.) show
showpage
quit
}
if
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 1
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 150 dict put
userdict /PDFVars 86 dict dup begin put
/_save 0 def
/_cshow 0 def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_lp /none def
/_doClip 0 def
/sfc 0 def
/_sfcs 0 def
/_sfc 0 def
/ssc 0 def
/_sscs 0 def
/_ssc 0 def
/_fcs 0 def
/_scs 0 def
/_fp 0 def
/_sp 0 def
/AGM_MAX_CS_COMPONENTS 10 def
/_fillColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_strokeColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_fc null def
/_sc null def
/DefaultGray [/DeviceGray] def
/DefaultRGB [/DeviceRGB] def
/DefaultCMYK [/DeviceCMYK] def
/_inT false def
/_tr -1 def
/_rise 0 def
/_ax 0 def
/_cx 0 def
/_ld 0 def
/_tm matrix def
/_ctm matrix def
/_mtx matrix def
/_hy (-) def
/_fScl 0 def
/_hs 1 def
/_pdfEncodings 2 array def
/_baselineadj 0 def
/_fTzero false def
/_Tj 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_op? false def
/_OP? false def
/_opmode 0 def
/_ColorSep5044? false def
/_tmpcolr? [] def
/_tmpop? {} def
/_processColors 0 def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 1
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
/StartLoad { dup dup not { /_save save dd } if } bd
/EndLoad { if not { _save restore } if } bd
%%EndResource
%%BeginResource: procset pdf
%%Version: 4.0 1
%%Copyright: Copyright 1998-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
[/b/B/b*/B*/BDC/BI/BMC/BT/BX/c/cm/cs/CS/d/d0/d1/Do/DP/EI/EMC/ET/EX/f/f*/g/G/gs
/h/i/j/J/k/K/l/m/M/MP/n/q/Q/re/rg/RG/ri/s/S/sc/SC/scn/SCN/sg/Tc/Td/TD/Tf/Tj/TJ
/TL/Tm/Tr/Ts/Tw/Tz/T*/v/w/W/W*/y/'/"
/applyInterpFunc/applystitchFunc/domainClip/EF/encodeInput/gsDI/ilp/icl
/initgs/int/limit/PS/rangeClip/RC/rf/makePat
] {null def} bind forall
/v { currentpoint 6 2 roll c } bd
/y { 2 copy c } bd
/h/closepath ld
/d/setdash ld
/j/setlinejoin ld
/J/setlinecap ld
/M/setmiterlimit ld
/w/setlinewidth ld
/i {
dup 0 eq { pop _defaultflatness } if
setflat
} bd
/gsDI {
begin
/Font here { aload pop Tf } if
/LW here { w } if
/LC here { J } if
/LJ here { j } if
/ML here { M } if
/D here { aload pop d } if
end
} bd
/ilp { /_lp /none dd } bd
/sfc {
_lp /fill ne {
_sfcs
_sfc
/_lp /fill dd
} if
} dd
/ssc {
_lp /stroke ne {
_sscs
_ssc
/_lp /stroke dd
} if
} dd
/icl { /_doClip 0 dd } bd
/W { /_doClip 1 dd } bd
/W* { /_doClip 2 dd } bd
/n {
{{} {clip} {eoclip}} _doClip get exec
icl
newpath
} bd
/s { h S } bd
/B { q f Q S } bd
/B* { q f* Q S } bd
/b { h B } bd
/b* { h B* } bd
/q/save ld
/Q { restore ilp } bd
/GetCSFamily {
dup type /arraytype eq {0 get} if
} bd
/GetCompsDict
11 dict begin
/DeviceGray { pop 1 } bd
/DeviceRGB { pop 3 } bd
/DeviceCMYK { pop 4 } bd
/CIEBasedA { pop 1 } bd
/CIEBasedABC { pop 3 } bd
/CIEBasedDEF { pop 3 } bd
/CIEBasedDEFG { pop 4 } bd
/DeviceN { 1 get length } bd
/Separation { pop 1 } bd
/Indexed { pop 1 } bd
/Pattern { pop 0 } bd
currentdict
end
def
/GetComps {
GetCompsDict
1 index GetCSFamily
get exec
} bd
/cs
{
dup _fcs eq
{ pop }
{ dup /_fcs xdd
GetComps
_fillColors exch get
/_fc xdd
/_fp null dd
} ifelse
} bd
/CS
{
dup _scs eq
{ pop }
{ dup /_scs xdd GetComps _strokeColors exch get /_sc xdd /_sp null dd }
ifelse
} bd
/sc {
_fc astore pop
ilp
} bd
/SC {
_sc astore pop
ilp
} bd
/g { DefaultGray cs sc } bd
/rg { DefaultRGB cs sc } bd
/k { DefaultCMYK cs sc } bd
/G { DefaultGray CS SC } bd
/RG { DefaultRGB CS SC } bd
/K { DefaultCMYK CS SC } bd
/cm { _mtx astore concat } bd
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/RC/rectclip ld
/EF/execform ld
/PS { cvx exec } bd
/initgs {
/DefaultGray [/DeviceGray] dd
/DefaultRGB [/DeviceRGB] dd
/DefaultCMYK [/DeviceCMYK] dd
0 g 0 G
[] 0 d
0 j
0 J
10 M
1 w
true setSA
/_op? false dd
/_OP? false dd
/_opmode 0 dd
/_defaulttransfer load 5 dict begin settransfer end
0 i
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} bd
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} bd
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} bd
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} bd
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} bind def
%%EndResource
%%BeginResource: procset pdflev2
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 2
%%Title: PDF operators, with code specific for Level 2
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/initialize {
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
false setoverprint
} bd
/terminate { } bd
/m/moveto ld
/l/lineto ld
/c/curveto ld
/setSA/setstrokeadjust ld
/defineRes/defineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/_sfcs {_fcs setcolorspace} bind dd
/_sscs {_scs setcolorspace} bind dd
/_sfc
{
_fc aload pop
_fp null eq
{ setcolor
_op? setoverprint
}
{ _fp setpattern }
ifelse
} bind dd
/_ssc
{
_sc aload pop
_sp null eq { setcolor _OP? setoverprint} { _sp setpattern } ifelse
} bind dd
/scn {
dup type /dicttype eq
{ dup /_fp xdd
/PaintType get 1 eq
{ /_fc _fillColors 0 get dd ilp }
{ /_fc _fillColors
_fcs 1 get
GetComps get dd
sc
}
ifelse
}
{ sc }
ifelse
} bd
/SCN {
dup type /dicttype eq
{ dup /_sp xdd
/PaintType get 1 eq
{ /_sc _strokeColors 0 get dd ilp }
{ /_sc _strokeColors _scs 1 get GetComps get dd
SC
}
ifelse
}
{ SC }
ifelse
} bd
/gs
{
begin
/SA here { setstrokeadjust } if
/OP here { /_OP? xdd } if
/op here
{ /_op? xdd }
{ /OP here { /_op? xdd } if }
ifelse
/BG here { setblackgeneration } if
/UCR here { setundercolorremoval } if
/FL here { i } if
/RI here { ri } if
/TR here
{
dup xcheck
{ settransfer }
{ aload pop setcolortransfer }
ifelse
} if
/sethalftonephase isdefined? { /HTP here { sethalftonephase } if } if
/HT here { sethalftone } if
currentdict gsDI
end
} bd
/f {
{ { sfc fill }
{gsave sfc fill grestore clip newpath icl ilp}
{gsave sfc fill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/f* {
{ { sfc eofill }
{gsave sfc eofill grestore clip newpath icl ilp}
{gsave sfc eofill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/S {
{ { ssc stroke }
{gsave ssc stroke grestore clip newpath icl ilp}
{gsave ssc stroke grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/rf {
{ { sfc rectfill }
{gsave sfc rectfill grestore clip newpath icl ilp}
{gsave sfc rectfill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/knownColorants? {
pop false
} bd
/makePat {
gsave
dup /Matrix get concat
matrix makepattern
grestore
/MadePattern defineRes pop
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 4.0 1
%%Copyright: Copyright 1987-1998 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 75 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
/_intT false dd
0 Tr
} bd
/terminate { end } bd
/_safeput
{
Level2? not
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
}
if
3 -1 roll load 3 1 roll put
}
bd
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
FontName currentdict
end
definefont pop
}
bd
/Level2?
systemdict /languagelevel known
{systemdict /languagelevel get 2 ge}
{false}
ifelse
def
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category resourcestatus
{
pop pop
/CIDFont resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckSupplements
{
1 index _pdfTextTempString cvs
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
{
/CIDFont findresource
/CIDSystemInfo get /Supplement get
exch /CMap findresource
/CIDSystemInfo get
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ pop pop true }
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckSupplements
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_fyAdj xdd
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
_fyAdj 0 ne or
{
exch _wmode _pdfConcatNames _fyAdj _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
/BaseLineAdj _fyAdj def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
/swj {
dup 4 1 roll
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
6 2 roll /_cnt 0 dd
{1 index eq {/_cnt _cnt 1 add dd} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} bd
/jss {
4 1 roll
{
pop pop
(0) exch 2 copy 0 exch put
gsave
exch false charpath currentpoint
5 index setmatrix stroke
3 -1 roll
32 eq
{
moveto
5 index 5 index rmoveto currentpoint
}
if
grestore
moveto
2 copy rmoveto
} exch cshow
6 {pop} repeat
} def
/jsfTzero {
{
pop pop
(0) exch 2 copy 0 exch put
exch show
32 eq
{
4 index 4 index rmoveto
}
if
2 copy rmoveto
} exch cshow
5 {pop} repeat
} def
/jsp
{
{
pop pop
(0) exch 2 copy 0 exch put
32 eq
{ exch 5 index 5 index 5 index 5 -1 roll widthshow }
{ false charpath }
ifelse
2 copy rmoveto
} exch cshow
5 {pop} repeat
} bd
/trj { _cx 0 fWModeProc 32 _ax 0 fWModeProc 6 5 roll } bd
/pjsf { trj sfc fawidthshowProc } bd
/pjss { trj _ctm ssc jss } bd
/pjsc { trj jsp } bd
/_Tjdef [
/pjsf load
/pjss load
{
dup
currentpoint 3 2 roll
pjsf
newpath moveto
pjss
} bind
{
trj swj rmoveto
} bind
{
dup currentpoint 4 2 roll gsave
pjsf
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll
currentpoint gsave newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll gsave
dup currentpoint 3 2 roll
pjsf
newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
/pjsc load
] def
/BT
{
/_inT true dd
_ctm currentmatrix pop matrix _tm copy pop
0 _rise _baselineadj add translate _hs 1 scale
0 0 moveto
} bd
/ET
{
/_inT false dd
_tr 3 gt {clip} if
_ctm setmatrix newpath
} bd
/Tr {
_inT { _tr 3 le {currentpoint newpath moveto} if } if
dup /_tr xdd
_Tjdef exch get /_Tj xdd
} bd
/Tj {
userdict /$$copystring 2 index put
_Tj
} bd
/iTm { _ctm setmatrix _tm concat 0 _rise _baselineadj add translate _hs 1 scale } bd
/Tm { _tm astore pop iTm 0 0 moveto } bd
/Td { _mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto } bd
/TD { dup /_ld xdd Td } bd
/_nullProc {} bd
/Tf {
dup 1000 div /_fScl xdd
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
Level2?
{ selectfont }
{ exch findfont exch scalefont setfont}
ifelse
currentfont dup
/_nullProc exch
/WMode known
{
1 index /WMode get 1 eq
{pop /exch}
if
}
if
load /fWModeProc xdd
dup
/FontType get 0 eq dup _cx 0 ne and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
/_fTzero xdd
dup /BaseLineAdj known
{ dup /BaseLineAdj get _fScl mul }
{ 0 }
ifelse
/_baselineadj xdd
dup /_pdfT3Font known
{ 0 }
{_tr}
ifelse
_Tjdef exch get /_Tj xdd
currentpoint iTm moveto
pop
} bd
/TL { neg /_ld xdd } bd
/Tw {
/_cx xdd
_cx 0 ne _fTzero and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
} bd
/Tc { /_ax xdd } bd
/Ts { /_rise xdd currentpoint iTm moveto } bd
/Tz { 100 div /_hs xdd iTm } bd
/Tk { exch pop _fScl mul neg 0 fWModeProc rmoveto } bd
/T* { 0 _ld Td } bd
/' { T* Tj } bd
/" { exch Tc exch Tw ' } bd
/TJ {
{
dup type /stringtype eq
{ Tj }
{ 0 exch Tk }
ifelse
} forall
} bd
/T- { _hy Tj } bd
/d0/setcharwidth ld
/d1 { setcachedevice /sfc{}dd /ssc{}dd } bd
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap resourcestatus
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
/MakeBoldFont
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[ PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Symbol
[/N14/Symbol -1 TZ
%%IncludeResource Century
[/N13/Century 0 TZ
%%IncludeResource TimesNewRomanPS-ItalicMT
[/N11/TimesNewRomanPS-ItalicMT 0 TZ
%%IncludeResource TimesNewRomanPSMT
[/N9/TimesNewRomanPSMT 0 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
0 0 595 842 re W n
0.5 w
2 J
158 278.75 m
175.25 278.75 l
S 
175.25 278.75 m
192.25 278.75 l
S 
192.25 278.75 m
209.5 279 l
S 
209.5 279 m
226.5 279 l
S 
226.5 279 m
243.5 279.25 l
S 
243.5 279.25 m
260.75 279.5 l
S 
260.75 279.5 m
277.75 279.5 l
S 
277.75 279.5 m
295 279.75 l
S 
295 279.75 m
312 280 l
S 
312 280 m
329 280.25 l
S 
329 280.25 m
346.25 280.25 l
S 
346.25 280.25 m
363.25 280.5 l
S 
363.25 280.5 m
380.5 280.75 l
S 
380.5 280.75 m
397.5 280.75 l
S 
397.5 280.75 m
414.5 280.75 l
S 
414.5 280.75 m
431.75 281 l
S 
431.75 281 m
448.75 281 l
S 
448.75 281 m
466 281.25 l
S 
466 281.25 m
482.75 281.25 l
S 
141.25 278.75 m
158 305 l
S 
158 305 m
175.25 328.75 l
S 
175.25 328.75 m
192.25 356.5 l
S 
192.25 356.5 m
209.5 375.75 l
S 
209.5 375.75 m
226.5 408.25 l
S 
226.5 408.25 m
243.5 434 l
S 
243.5 434 m
260.75 445.75 l
S 
260.75 445.75 m
277.75 454 l
S 
277.75 454 m
295 464.25 l
S 
295 464.25 m
312 474.5 l
S 
312 474.5 m
329 506.5 l
S 
329 506.5 m
346.25 534.25 l
S 
346.25 534.25 m
363.25 529.75 l
S 
363.25 529.75 m
380.5 562.25 l
S 
380.5 562.25 m
397.5 572.5 l
S 
397.5 572.5 m
414.5 583.25 l
S 
414.5 583.25 m
431.75 604.25 l
S 
431.75 604.25 m
448.75 643.25 l
S 
448.75 643.25 m
466 665.5 l
S 
466 665.5 m
482.75 699.75 l
S 
141.5 278.75 m
158 289.25 l
S 
158 289.25 m
175.25 300.75 l
S 
175.25 300.75 m
192.25 310 l
S 
192.25 310 m
209.5 325 l
S 
209.5 325 m
226.5 340.75 l
S 
226.5 340.75 m
243.5 350.75 l
S 
243.5 350.75 m
260.75 358.25 l
S 
260.75 358.25 m
277.75 377.5 l
S 
277.75 377.5 m
295 386.5 l
S 
295 386.5 m
312 386 l
S 
312 386 m
329 405.25 l
S 
329 405.25 m
346.25 412.25 l
S 
346.25 412.25 m
363.25 422 l
S 
363.25 422 m
380.5 449 l
S 
380.5 449 m
397.5 478 l
S 
397.5 478 m
414.5 470.75 l
S 
414.5 470.75 m
431.75 491.25 l
S 
431.75 491.25 m
448.75 501.75 l
S 
448.75 501.75 m
466 509.75 l
S 
466 509.75 m
482.75 541.25 l
S 
0.25 w
141.125 278.375 m
147.125 278.375 l
S 
141.125 331.625 m
147.125 331.625 l
S 
141.125 384.875 m
147.125 384.875 l
S 
141.125 438.125 m
147.125 438.125 l
S 
141.125 491.375 m
147.125 491.375 l
S 
141.125 544.625 m
147.125 544.625 l
S 
141.125 597.875 m
147.125 597.875 l
S 
141.125 651.125 m
147.125 651.125 l
S 
141.125 704.375 m
147.125 704.375 l
S 
141.125 288.875 m
144.125 288.875 l
S 
141.125 299.625 m
144.125 299.625 l
S 
141.125 310.125 m
144.125 310.125 l
S 
141.125 320.875 m
144.125 320.875 l
S 
141.125 342.125 m
144.125 342.125 l
S 
141.125 352.875 m
144.125 352.875 l
S 
141.125 363.375 m
144.125 363.375 l
S 
141.125 374.125 m
144.125 374.125 l
S 
141.125 395.375 m
144.125 395.375 l
S 
141.125 406.125 m
144.125 406.125 l
S 
141.125 416.625 m
144.125 416.625 l
S 
141.125 427.375 m
144.125 427.375 l
S 
141.125 448.625 m
144.125 448.625 l
S 
141.125 459.375 m
144.125 459.375 l
S 
141.125 469.875 m
144.125 469.875 l
S 
141.125 480.625 m
144.125 480.625 l
S 
141.125 501.875 m
144.125 501.875 l
S 
141.125 512.625 m
144.125 512.625 l
S 
141.125 523.125 m
144.125 523.125 l
S 
141.125 533.875 m
144.125 533.875 l
S 
141.125 555.125 m
144.125 555.125 l
S 
141.125 565.875 m
144.125 565.875 l
S 
141.125 576.375 m
144.125 576.375 l
S 
141.125 587.125 m
144.125 587.125 l
S 
141.125 608.375 m
144.125 608.375 l
S 
141.125 619.125 m
144.125 619.125 l
S 
141.125 629.625 m
144.125 629.625 l
S 
141.125 640.375 m
144.125 640.375 l
S 
141.125 661.625 m
144.125 661.625 l
S 
141.125 672.375 m
144.125 672.375 l
S 
141.125 682.875 m
144.125 682.875 l
S 
141.125 693.625 m
144.125 693.625 l
S 
483.125 278.375 m
477.125 278.375 l
S 
483.125 331.625 m
477.125 331.625 l
S 
483.125 384.875 m
477.125 384.875 l
S 
483.125 438.125 m
477.125 438.125 l
S 
483.125 491.375 m
477.125 491.375 l
S 
483.125 544.625 m
477.125 544.625 l
S 
483.125 597.875 m
477.125 597.875 l
S 
483.125 651.125 m
477.125 651.125 l
S 
483.125 704.375 m
477.125 704.375 l
S 
483.125 288.875 m
480.125 288.875 l
S 
483.125 299.625 m
480.125 299.625 l
S 
483.125 310.125 m
480.125 310.125 l
S 
483.125 320.875 m
480.125 320.875 l
S 
483.125 342.125 m
480.125 342.125 l
S 
483.125 352.875 m
480.125 352.875 l
S 
483.125 363.375 m
480.125 363.375 l
S 
483.125 374.125 m
480.125 374.125 l
S 
483.125 395.375 m
480.125 395.375 l
S 
483.125 406.125 m
480.125 406.125 l
S 
483.125 416.625 m
480.125 416.625 l
S 
483.125 427.375 m
480.125 427.375 l
S 
483.125 448.625 m
480.125 448.625 l
S 
483.125 459.375 m
480.125 459.375 l
S 
483.125 469.875 m
480.125 469.875 l
S 
483.125 480.625 m
480.125 480.625 l
S 
483.125 501.875 m
480.125 501.875 l
S 
483.125 512.625 m
480.125 512.625 l
S 
483.125 523.125 m
480.125 523.125 l
S 
483.125 533.875 m
480.125 533.875 l
S 
483.125 555.125 m
480.125 555.125 l
S 
483.125 565.875 m
480.125 565.875 l
S 
483.125 576.375 m
480.125 576.375 l
S 
483.125 587.125 m
480.125 587.125 l
S 
483.125 608.375 m
480.125 608.375 l
S 
483.125 619.125 m
480.125 619.125 l
S 
483.125 629.625 m
480.125 629.625 l
S 
483.125 640.375 m
480.125 640.375 l
S 
483.125 661.625 m
480.125 661.625 l
S 
483.125 672.375 m
480.125 672.375 l
S 
483.125 682.875 m
480.125 682.875 l
S 
483.125 693.625 m
480.125 693.625 l
S 
141.125 278.375 m
141.125 284.375 l
S 
209.625 278.375 m
209.625 284.375 l
S 
277.875 278.375 m
277.875 284.375 l
S 
346.375 278.375 m
346.375 284.375 l
S 
414.625 278.375 m
414.625 284.375 l
S 
483.125 278.375 m
483.125 284.375 l
S 
158.125 278.375 m
158.125 281.375 l
S 
175.375 278.375 m
175.375 281.375 l
S 
192.375 278.375 m
192.375 281.375 l
S 
226.625 278.375 m
226.625 281.375 l
S 
243.625 278.375 m
243.625 281.375 l
S 
260.875 278.375 m
260.875 281.375 l
S 
295.125 278.375 m
295.125 281.375 l
S 
312.125 278.375 m
312.125 281.375 l
S 
329.125 278.375 m
329.125 281.375 l
S 
363.375 278.375 m
363.375 281.375 l
S 
380.625 278.375 m
380.625 281.375 l
S 
397.625 278.375 m
397.625 281.375 l
S 
431.875 278.375 m
431.875 281.375 l
S 
448.875 278.375 m
448.875 281.375 l
S 
466.125 278.375 m
466.125 281.375 l
S 
141.125 704.375 m
141.125 698.375 l
S 
209.625 704.375 m
209.625 698.375 l
S 
277.875 704.375 m
277.875 698.375 l
S 
346.375 704.375 m
346.375 698.375 l
S 
414.625 704.375 m
414.625 698.375 l
S 
483.125 704.375 m
483.125 698.375 l
S 
158.125 704.375 m
158.125 701.375 l
S 
175.375 704.375 m
175.375 701.375 l
S 
192.375 704.375 m
192.375 701.375 l
S 
226.625 704.375 m
226.625 701.375 l
S 
243.625 704.375 m
243.625 701.375 l
S 
260.875 704.375 m
260.875 701.375 l
S 
295.125 704.375 m
295.125 701.375 l
S 
312.125 704.375 m
312.125 701.375 l
S 
329.125 704.375 m
329.125 701.375 l
S 
363.375 704.375 m
363.375 701.375 l
S 
380.625 704.375 m
380.625 701.375 l
S 
397.625 704.375 m
397.625 701.375 l
S 
431.875 704.375 m
431.875 701.375 l
S 
448.875 704.375 m
448.875 701.375 l
S 
466.125 704.375 m
466.125 701.375 l
S 
1 w
141 278.5 m
141 704.5 l
S 
483 278.5 m
483 704.5 l
S 
141 278.5 m
483 278.5 l
S 
141 704.5 m
483 704.5 l
S 
0.25 w
141.125 281.375 m
142.78101 281.375 144.125 280.03101 144.125 278.375 c
144.125 276.71899 142.78101 275.375 141.125 275.375 c
139.46899 275.375 138.125 276.71899 138.125 278.375 c
138.125 280.03101 139.46899 281.375 141.125 281.375 c
s 
158.125 281.625 m
159.78101 281.625 161.125 280.28101 161.125 278.625 c
161.125 276.96899 159.78101 275.625 158.125 275.625 c
156.46899 275.625 155.125 276.96899 155.125 278.625 c
155.125 280.28101 156.46899 281.625 158.125 281.625 c
s 
175.375 281.625 m
177.03101 281.625 178.375 280.28101 178.375 278.625 c
178.375 276.96899 177.03101 275.625 175.375 275.625 c
173.71899 275.625 172.375 276.96899 172.375 278.625 c
172.375 280.28101 173.71899 281.625 175.375 281.625 c
s 
192.375 281.625 m
194.03101 281.625 195.375 280.28101 195.375 278.625 c
195.375 276.96899 194.03101 275.625 192.375 275.625 c
190.71899 275.625 189.375 276.96899 189.375 278.625 c
189.375 280.28101 190.71899 281.625 192.375 281.625 c
s 
209.625 281.875 m
211.28101 281.875 212.625 280.53101 212.625 278.875 c
212.625 277.21899 211.28101 275.875 209.625 275.875 c
207.96899 275.875 206.625 277.21899 206.625 278.875 c
206.625 280.53101 207.96899 281.875 209.625 281.875 c
s 
226.625 281.875 m
228.28101 281.875 229.625 280.53101 229.625 278.875 c
229.625 277.21899 228.28101 275.875 226.625 275.875 c
224.96899 275.875 223.625 277.21899 223.625 278.875 c
223.625 280.53101 224.96899 281.875 226.625 281.875 c
s 
243.625 282.125 m
245.28101 282.125 246.625 280.78101 246.625 279.125 c
246.625 277.46899 245.28101 276.125 243.625 276.125 c
241.96899 276.125 240.625 277.46899 240.625 279.125 c
240.625 280.78101 241.96899 282.125 243.625 282.125 c
s 
260.875 282.375 m
262.53101 282.375 263.875 281.03101 263.875 279.375 c
263.875 277.71899 262.53101 276.375 260.875 276.375 c
259.21899 276.375 257.875 277.71899 257.875 279.375 c
257.875 281.03101 259.21899 282.375 260.875 282.375 c
s 
277.875 282.375 m
279.53101 282.375 280.875 281.03101 280.875 279.375 c
280.875 277.71899 279.53101 276.375 277.875 276.375 c
276.21899 276.375 274.875 277.71899 274.875 279.375 c
274.875 281.03101 276.21899 282.375 277.875 282.375 c
s 
295.125 282.625 m
296.78101 282.625 298.125 281.28101 298.125 279.625 c
298.125 277.96899 296.78101 276.625 295.125 276.625 c
293.46899 276.625 292.125 277.96899 292.125 279.625 c
292.125 281.28101 293.46899 282.625 295.125 282.625 c
s 
312.125 282.875 m
313.78101 282.875 315.125 281.53101 315.125 279.875 c
315.125 278.21899 313.78101 276.875 312.125 276.875 c
310.46899 276.875 309.125 278.21899 309.125 279.875 c
309.125 281.53101 310.46899 282.875 312.125 282.875 c
s 
329.125 283.125 m
330.78101 283.125 332.125 281.78101 332.125 280.125 c
332.125 278.46899 330.78101 277.125 329.125 277.125 c
327.46899 277.125 326.125 278.46899 326.125 280.125 c
326.125 281.78101 327.46899 283.125 329.125 283.125 c
s 
346.375 283.125 m
348.03101 283.125 349.375 281.78101 349.375 280.125 c
349.375 278.46899 348.03101 277.125 346.375 277.125 c
344.71899 277.125 343.375 278.46899 343.375 280.125 c
343.375 281.78101 344.71899 283.125 346.375 283.125 c
s 
363.375 283.375 m
365.03101 283.375 366.375 282.03101 366.375 280.375 c
366.375 278.71899 365.03101 277.375 363.375 277.375 c
361.71899 277.375 360.375 278.71899 360.375 280.375 c
360.375 282.03101 361.71899 283.375 363.375 283.375 c
s 
380.625 283.625 m
382.28101 283.625 383.625 282.28101 383.625 280.625 c
383.625 278.96899 382.28101 277.625 380.625 277.625 c
378.96899 277.625 377.625 278.96899 377.625 280.625 c
377.625 282.28101 378.96899 283.625 380.625 283.625 c
s 
397.625 283.625 m
399.28101 283.625 400.625 282.28101 400.625 280.625 c
400.625 278.96899 399.28101 277.625 397.625 277.625 c
395.96899 277.625 394.625 278.96899 394.625 280.625 c
394.625 282.28101 395.96899 283.625 397.625 283.625 c
s 
414.625 283.625 m
416.28101 283.625 417.625 282.28101 417.625 280.625 c
417.625 278.96899 416.28101 277.625 414.625 277.625 c
412.96899 277.625 411.625 278.96899 411.625 280.625 c
411.625 282.28101 412.96899 283.625 414.625 283.625 c
s 
431.875 283.875 m
433.53101 283.875 434.875 282.53101 434.875 280.875 c
434.875 279.21899 433.53101 277.875 431.875 277.875 c
430.21899 277.875 428.875 279.21899 428.875 280.875 c
428.875 282.53101 430.21899 283.875 431.875 283.875 c
s 
448.875 283.875 m
450.53101 283.875 451.875 282.53101 451.875 280.875 c
451.875 279.21899 450.53101 277.875 448.875 277.875 c
447.21899 277.875 445.875 279.21899 445.875 280.875 c
445.875 282.53101 447.21899 283.875 448.875 283.875 c
s 
466.125 284.125 m
467.78101 284.125 469.125 282.78101 469.125 281.125 c
469.125 279.46899 467.78101 278.125 466.125 278.125 c
464.46899 278.125 463.125 279.46899 463.125 281.125 c
463.125 282.78101 464.46899 284.125 466.125 284.125 c
s 
483.125 284.375 m
484.78101 284.375 486.125 283.03101 486.125 281.375 c
486.125 279.71899 484.78101 278.375 483.125 278.375 c
481.46899 278.375 480.125 279.71899 480.125 281.375 c
480.125 283.03101 481.46899 284.375 483.125 284.375 c
s 
2 j
138.125 275.375 m
141.125 281.375 l
144.125 275.375 l
138.125 275.375 l
b* 
0 j
2 j
155.125 301.875 m
158.125 307.875 l
161.125 301.875 l
155.125 301.875 l
b* 
0 j
2 j
172.375 325.625 m
175.375 331.625 l
178.375 325.625 l
172.375 325.625 l
b* 
0 j
2 j
189.375 353.375 m
192.375 359.375 l
195.375 353.375 l
189.375 353.375 l
b* 
0 j
2 j
206.625 372.625 m
209.625 378.625 l
212.625 372.625 l
206.625 372.625 l
b* 
0 j
2 j
223.625 405.125 m
226.625 411.125 l
229.625 405.125 l
223.625 405.125 l
b* 
0 j
2 j
240.625 430.875 m
243.625 436.875 l
246.625 430.875 l
240.625 430.875 l
b* 
0 j
2 j
257.875 442.625 m
260.875 448.625 l
263.875 442.625 l
257.875 442.625 l
b* 
0 j
2 j
274.875 450.875 m
277.875 456.875 l
280.875 450.875 l
274.875 450.875 l
b* 
0 j
2 j
292.125 461.125 m
295.125 467.125 l
298.125 461.125 l
292.125 461.125 l
b* 
0 j
2 j
309.125 471.375 m
312.125 477.375 l
315.125 471.375 l
309.125 471.375 l
b* 
0 j
2 j
326.125 503.375 m
329.125 509.375 l
332.125 503.375 l
326.125 503.375 l
b* 
0 j
2 j
343.375 531.125 m
346.375 537.125 l
349.375 531.125 l
343.375 531.125 l
b* 
0 j
2 j
360.375 526.625 m
363.375 532.625 l
366.375 526.625 l
360.375 526.625 l
b* 
0 j
2 j
377.625 559.125 m
380.625 565.125 l
383.625 559.125 l
377.625 559.125 l
b* 
0 j
2 j
394.625 569.375 m
397.625 575.375 l
400.625 569.375 l
394.625 569.375 l
b* 
0 j
2 j
411.625 580.125 m
414.625 586.125 l
417.625 580.125 l
411.625 580.125 l
b* 
0 j
2 j
428.875 601.125 m
431.875 607.125 l
434.875 601.125 l
428.875 601.125 l
b* 
0 j
2 j
445.875 640.125 m
448.875 646.125 l
451.875 640.125 l
445.875 640.125 l
b* 
0 j
2 j
463.125 662.375 m
466.125 668.375 l
469.125 662.375 l
463.125 662.375 l
b* 
0 j
2 j
480.125 697.375 m
483.125 703.375 l
486.125 697.375 l
480.125 697.375 l
b* 
0 j
138.125 275.375 m
144.125 281.375 l
S 
138.125 281.375 m
144.125 275.375 l
S 
155.125 286.125 m
161.125 292.125 l
S 
155.125 292.125 m
161.125 286.125 l
S 
172.375 297.625 m
178.375 303.625 l
S 
172.375 303.625 m
178.375 297.625 l
S 
189.375 306.875 m
195.375 312.875 l
S 
189.375 312.875 m
195.375 306.875 l
S 
206.625 321.875 m
212.625 327.875 l
S 
206.625 327.875 m
212.625 321.875 l
S 
223.625 337.625 m
229.625 343.625 l
S 
223.625 343.625 m
229.625 337.625 l
S 
240.625 347.625 m
246.625 353.625 l
S 
240.625 353.625 m
246.625 347.625 l
S 
257.875 355.125 m
263.875 361.125 l
S 
257.875 361.125 m
263.875 355.125 l
S 
274.875 374.375 m
280.875 380.375 l
S 
274.875 380.375 m
280.875 374.375 l
S 
292.125 383.375 m
298.125 389.375 l
S 
292.125 389.375 m
298.125 383.375 l
S 
309.125 382.875 m
315.125 388.875 l
S 
309.125 388.875 m
315.125 382.875 l
S 
326.125 402.125 m
332.125 408.125 l
S 
326.125 408.125 m
332.125 402.125 l
S 
343.375 409.125 m
349.375 415.125 l
S 
343.375 415.125 m
349.375 409.125 l
S 
360.375 418.875 m
366.375 424.875 l
S 
360.375 424.875 m
366.375 418.875 l
S 
377.625 445.875 m
383.625 451.875 l
S 
377.625 451.875 m
383.625 445.875 l
S 
394.625 474.875 m
400.625 480.875 l
S 
394.625 480.875 m
400.625 474.875 l
S 
411.625 467.625 m
417.625 473.625 l
S 
411.625 473.625 m
417.625 467.625 l
S 
428.875 488.125 m
434.875 494.125 l
S 
428.875 494.125 m
434.875 488.125 l
S 
445.875 498.625 m
451.875 504.625 l
S 
445.875 504.625 m
451.875 498.625 l
S 
463.125 506.625 m
469.125 512.625 l
S 
463.125 512.625 m
469.125 506.625 l
S 
480.125 538.625 m
486.125 544.625 l
S 
480.125 544.625 m
486.125 538.625 l
S 
BT
/N9 14 Tf
126.875 272.75 TD
/N9 14 Tf (0)Tj
ET
BT
112.875 326 TD
0 Tc
0 Tw
/N9 14 Tf (500)Tj
ET
BT
105.875 379.25 TD
/N9 14 Tf (1000)Tj
ET
BT
105.875 432.5 TD
/N9 14 Tf (1500)Tj
ET
BT
105.875 485.75 TD
/N9 14 Tf (2000)Tj
ET
BT
105.875 539 TD
/N9 14 Tf (2500)Tj
ET
BT
105.875 592.25 TD
/N9 14 Tf (3000)Tj
ET
BT
105.875 645.5 TD
/N9 14 Tf (3500)Tj
ET
BT
105.875 698.75 TD
/N9 14 Tf (4000)Tj
ET
BT
138.125 252 TD
/N9 14 Tf (0)Tj
ET
BT
194.875 252 TD
/N9 14 Tf (2 10)Tj
ET
BT
/N9 9 Tf
219.875 259 TD
/N9 9 Tf (5)Tj
ET
BT
/N9 14 Tf
263.375 252 TD
/N9 14 Tf (4 10)Tj
ET
BT
/N9 9 Tf
288.375 259 TD
/N9 9 Tf (5)Tj
ET
BT
/N9 14 Tf
331.625 252 TD
/N9 14 Tf (6 10)Tj
ET
BT
/N9 9 Tf
356.625 259 TD
/N9 9 Tf (5)Tj
ET
BT
/N9 14 Tf
400.125 252 TD
/N9 14 Tf (8 10)Tj
ET
BT
/N9 9 Tf
425.125 259 TD
/N9 9 Tf (5)Tj
ET
BT
/N9 14 Tf
468.625 252 TD
/N9 14 Tf (1 10)Tj
ET
BT
/N9 9 Tf
493.625 259 TD
/N9 9 Tf (6)Tj
ET
BT
/N11 14 Tf
0 1 -1 0 82.125 470.5 Tm
/N11 14 Tf (d)Tj
ET
BT
/N11 9 Tf
0 1 -1 0 89.125 477.5 Tm
/N11 9 Tf (V)Tj
ET
BT
/N11 14 Tf
0 1 -1 0 82.125 483.75 Tm
0.25 Tc
/N11 14 Tf (\(0\)/d)Tj
ET
BT
/N11 9 Tf
0 1 -1 0 89.125 512.25 Tm
/N11 9 Tf (V)Tj
ET
BT
/N11 14 Tf
0 1 -1 0 82.125 518.5 Tm
0.373 Tc
/N11 14 Tf (\(n\))Tj
ET
BT
/N9 14 Tf
285.375 209.5 TD
0 Tc
/N9 14 Tf (MC steps)Tj
ET
BT
/N14 18 Tf
188.125 652.5 TD
/N14 18 Tf (b)Tj
ET
BT
/N11 18 Tf
198.375 652.5 TD
/N11 18 Tf (=10)Tj
ET
BT
/N9 14 Tf
307.125 540.5 TD
/N9 14 Tf (q=2.5)Tj
ET
BT
335.125 457.5 TD
/N9 14 Tf (q=1.5)Tj
ET
BT
402.125 302.5 TD
/N9 14 Tf (q=1.0)Tj
ET
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%DocumentNeededResources:
%%+ font Symbol
%%+ font TimesNewRomanPS-ItalicMT
%%+ font Century
%%+ font TimesNewRomanPSMT
%%EOF
